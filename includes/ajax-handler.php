<?php
// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Handle the AJAX request for searching pricing items.
 *
 * Searches both the post title and the 'mpw_cpt_code' custom field.
 */
function mpw_handle_ajax_search() {
    // 1. Verify Nonce for security
    // Ensure the nonce action name 'mpw_search_nonce' matches the one sent from your JavaScript.
    check_ajax_referer( 'mpw_search_nonce', 'nonce' );

    // 2. Get and Sanitize Search Query
    $search_query = isset( $_POST['query'] ) ? sanitize_text_field( wp_unslash( $_POST['query'] ) ) : ''; // Use wp_unslash for safety

    // 3. Basic validation
    if ( empty( $search_query ) ) {
        wp_send_json_success( array( 'message' => 'Please enter a search term.' ) ); // Provide feedback
        wp_die();
    }

    // Optional: Add minimum length check
    // if ( strlen( $search_query ) < 3 ) {
    //     wp_send_json_success( array( 'message' => 'Search term must be at least 3 characters long.' ) );
    //     wp_die();
    // }

    // 4. Caching Check (Transients API)
    $transient_key = 'mpw_search_' . md5( $search_query );
    $cached_results = get_transient( $transient_key );

    // --- Development Note: Temporarily disable cache during testing ---
    // $cached_results = false;
    // ---

    if ( false !== $cached_results ) {
        // Serve results from cache
        wp_send_json_success( $cached_results );
        wp_die();
    }

    // 5. Prepare Database Query Arguments
    // We will use the 's' parameter for searching title/content
    // and a meta_query for the 'mpw_cpt_code'.
    // A filter will be used to combine these with OR logic.
    $args = array(
        'post_type'      => 'pricing_item',
        'posts_per_page' => 50, // Limit results for performance (-1 can be slow)
        'post_status'    => 'publish',
        'orderby'        => 'title',
        'order'          => 'ASC',
        's'              => $search_query, // Search in title and content
        'meta_query'     => array(
            'relation' => 'OR', // This OR is for conditions *within* the meta_query if you add more
            array(
                'key'     => 'mpw_cpt_code', // The ACF field name
                'value'   => $search_query,
                'compare' => 'LIKE',      // Partial match
            ),
            // You might add other meta fields here if needed, e.g.
            // array(
            //     'key' => 'another_searchable_field',
            //     'value' => $search_query,
            //     'compare' => 'LIKE'
            // )
        ),
        // Add a custom query variable to signal our filter to activate
        'mpw_custom_search' => true,
    );

    // Filter function to modify the search SQL WHERE clause
    // This combines the 's' search (title/content) with the meta query using OR
    function mpw_search_filter_combine_s_and_meta( $search, $wp_query ) {
        global $wpdb;

        // Check if our custom query variable is set and if 's' or 'meta_query' are present
        if ( ! $wp_query->get( 'mpw_custom_search' ) || ( ! $wp_query->get( 's' ) && ! $wp_query->get( 'meta_query' ) ) ) {
            return $search; // Only modify our specific query
        }

        // Get the parts of the WHERE clause generated by 's' and 'meta_query'
        // WP_Query generates these separately when both 's' and 'meta_query' are present.
        // We need to find these parts and combine them with OR.

        // Extract the search term SQL generated by 's'
        $search_term_sql = '';
        if ( $wp_query->get( 's' ) ) {
             // The standard search SQL part usually looks like:
             // " AND (((wp_posts.post_title LIKE '%...%') OR (wp_posts.post_excerpt LIKE '%...%') OR (wp_posts.post_content LIKE '%...%')))"
             // We need to capture this part. preg_match might be needed for robustness, but let's try finding it simply first.
             // A simpler approach: Recreate the title/content search part manually.
             $s = $wp_query->get( 's' );
             $like_term = '%' . $wpdb->esc_like( $s ) . '%';
             // If you only want to search title, remove post_content/post_excerpt checks
             $search_term_sql = $wpdb->prepare(
                "({$wpdb->posts}.post_title LIKE %s OR {$wpdb->posts}.post_content LIKE %s)",
                 $like_term,
                 $like_term
             );
        }


        // Extract the meta query SQL
        // This requires getting the SQL generated by the Meta Query class.
        // This part is complex because WP generates JOINs and WHERE clauses for meta queries separately.
        // A more straightforward approach for OR between 's' and a single meta key:
        // Modify the search SQL generated by 's' to include the meta key check.

        $meta_key = 'mpw_cpt_code'; // The key we are searching
        $meta_value_like = '%' . $wpdb->esc_like( $wp_query->get( 's' ) ) . '%'; // Use the same search term

        // Construct the final WHERE part: (Title LIKE %s OR Content LIKE %s) OR (Meta Key Exists AND Meta Value LIKE %s)
        // We need to ensure the meta query part joins the postmeta table correctly.
        // WP_Query usually handles the JOIN. We focus on the WHERE condition.

        // Let's try modifying the $search string directly.
        // $search will contain something like: " AND (((wp_posts.post_title LIKE '%...%') OR ...))"
        // We want to add " OR (mt1.meta_key = 'mpw_cpt_code' AND mt1.meta_value LIKE '%...%')"
        // Note: 'mt1' is the default alias WP_Query uses for the first meta query join.

        if ( ! empty( $search ) && $wp_query->get('meta_query') ) {
             // Find the closing parenthesis of the 's' search part
             $closing_paren_pos = strrpos( $search, '))' );
             if ($closing_paren_pos !== false) {
                 // Prepare the meta condition SQL
                 $meta_sql = $wpdb->prepare(
                     " OR (mt1.meta_key = %s AND mt1.meta_value LIKE %s)",
                     $meta_key,
                     $meta_value_like
                 );
                 // Insert the meta condition before the closing parenthesis
                 $search = substr_replace( $search, $meta_sql, $closing_paren_pos, 0 );
             }
        } elseif ( empty($search) && $wp_query->get('meta_query') ) {
             // If 's' was empty or didn't produce search SQL, but meta query exists
             // We need to construct the initial WHERE clause for the meta query.
             // This case is less likely if 's' is always provided.
             // For simplicity, we assume 's' generates the initial $search part.
             // A full solution might involve the 'posts_clauses' filter instead.
             // For now, let's assume 's' provides the base $search.
        }


        return $search;
    }


    // Add the filter *before* the query
    // Using 'posts_search' which specifically filters the search SQL part
    add_filter( 'posts_search', 'mpw_search_filter_combine_s_and_meta', 10, 2 );

    // Execute the Query
    $query = new WP_Query( $args );

    // Remove the filter *immediately after* the query to avoid affecting other queries
    remove_filter( 'posts_search', 'mpw_search_filter_combine_s_and_meta', 10, 2 );


    // 6. Format Results
    $results = array();
    if ( $query->have_posts() ) {
        while ( $query->have_posts() ) {
            $query->the_post();
            $post_id = get_the_ID();

            // Get standard fields
            $title = get_the_title();
            $description = get_the_content(); // Get content from editor
            $permalink = get_permalink();

            // Get ACF fields (Check if ACF is active)
            $cpt_code = '';
            $price = '';
            if ( function_exists('get_field') ) {
                $cpt_code = get_field( 'mpw_cpt_code', $post_id );
                $price = get_field( 'mpw_estimated_price', $post_id ); // Assuming this is the price field name
            }

            $results[] = array(
                'id'          => $post_id,
                'title'       => $title,
                // Sanitize output for security
                'cpt_code'    => esc_html( $cpt_code ),
                'price'       => esc_html( $price ),
                'description' => wp_kses_post( $description ), // Allow safe HTML
                'permalink'   => esc_url( $permalink ),
            );
        }
        wp_reset_postdata(); // Restore original post data
    } else {
        // Optional: Provide a specific message when no results are found
        // $results = array( 'message' => 'No matching procedures found.' );
    }


    // 7. Cache the Results (Consider caching empty results too, maybe for shorter duration)
    set_transient( $transient_key, $results, HOUR_IN_SECONDS ); // Cache for 1 hour

    // 8. Send JSON Response
    wp_send_json_success( $results );

    // 9. Always die() in AJAX handlers
    wp_die();
}

// Hook the AJAX handler for both logged-in and non-logged-in users
// Ensure the action name 'mpw_search_procedures' matches the one used in your JavaScript AJAX call.
add_action( 'wp_ajax_mpw_search_procedures', 'mpw_handle_ajax_search' );
add_action( 'wp_ajax_nopriv_mpw_search_procedures', 'mpw_handle_ajax_search' );

